/****************************************************************************
 *
 *   FileName: stack.h
 *
 *   Author:  
 *
 *   Date: 
 *
 *   Description: simple stack api
 *
 ****************************************************************************/
#ifndef _STACK_H_
#define _STACK_H_

/****************************************************************************
 ***************      I N C L U D E   F I L E S                 *************
 ****************************************************************************/
#include "err_defs.h"

/****************************************************************************
 ***************     G L O B A L        D E F N I T I O N S    **************
 ****************************************************************************/
#define STACKG_MAX_ELEMENTS (30)

/****************************************************************************
 ***************      G L O B A L         T Y P E D E F S     ***************
 ****************************************************************************/
typedef UINT32 STACKG_elemT;
typedef struct
{
   INT32       stackSize;
   STACKG_elemT stack[STACKG_MAX_ELEMENTS];
	INT32        top;
} STACKG_stackT;

/****************************************************************************
 ***************       G L O B A L       D A T A              ***************
 ****************************************************************************/

/****************************************************************************
 ***************     G L O B A L         F U N C T I O N S    ***************
 ****************************************************************************/
INT32  STACKG_init(STACKG_stackT *stackP, UINT32 size);
ERRG_codeE  STACKG_pop(STACKG_stackT *stackP,STACKG_elemT *elem);
ERRG_codeE  STACKG_push(STACKG_stackT *stackP, STACKG_elemT elemP);
UINT32 STACKG_numElements(STACKG_stackT *stackP);
void   STACKG_show(STACKG_stackT *stackP);

#endif // _STACK_H_


