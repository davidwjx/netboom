/****************************************************************************
 *
 *   FileName: err_defs.h
 *
 *   Author: Benny V.
 *
 *   Date:
 *
 *   Description: error handling
 *
 ****************************************************************************/
#ifndef _ERR_DEFS_H_
#define _ERR_DEFS_H_

#include "inu_types.h"
#include "inu_defs.h"

#ifdef __cplusplus
extern "C" {
#endif


/****************************************************************************
 ***************     G L O B A L        D E F N I T I O N S    **************
 ****************************************************************************/

/*************************************************************************
 * Error Code structure:                                                 *
 * PID - Proccesor ID                                                    *
 * MID - Module ID                                                       *
 *************************************************************************
 * | MSBit 8 bits    |    8 bits      |     16 bits                    | *
 * |_________________|________________|________________________________| *
 * |Reserved|  PID   |     MID        |    Error Code                  | *
 * |___4____|___4____|________________|________________________________| *
 *************************************************************************/

#if (DEFSG_PROCESSOR == DEFSG_HOST)
   #define CURR_PID (HOST_ID)
#elif (DEFSG_PROCESSOR == DEFSG_GP)
   #define CURR_PID (GP_ID)
#elif (DEFSG_PROCESSOR == DEFSG_EV72)
   #define CURR_PID (EV61_ID)
#else
   #define CURR_PID (CEVA_ID)
#endif

#define ERRG_SIZE_OF_ERR_CODE          (16)
#define ERRG_SIZE_OF_MID               (8)

#define ERRG_CODE_START_SHIFT          (0)
#define ERRG_MID_START_SHIFT           (ERRG_SIZE_OF_ERR_CODE)
#define ERRG_PID_START_SHIFT           (ERRG_MID_START_SHIFT + ERRG_SIZE_OF_MID)

#define ERRG_MID_MASK(mid)             (mid << ERRG_SIZE_OF_ERR_CODE)
#define ERRG_PID_MASK(pid)             (pid << (ERRG_SIZE_OF_MID + ERRG_SIZE_OF_ERR_CODE))

#define ERRG_GET_ERR_CODE(err)         ((err >> ERRG_CODE_START_SHIFT) & 0x0000FFFF)
#define ERRG_GET_MID(err)              ((err >> ERRG_SIZE_OF_ERR_CODE) & 0x000000FF)
#define ERRG_GET_PID(err)              ((err >> ERRG_PID_START_SHIFT)  & 0x0000000F)
#define ERRG_GET_ERR_CODE_AND_MID(err) ((err >> ERRG_CODE_START_SHIFT) & 0x00FFFFFF)

#define ERRG_SUCCEEDED(err)            (ERRG_GET_ERR_CODE(err) == 0)
#define ERRG_FAILED(err)               (ERRG_GET_ERR_CODE(err) > 0)

#define ERRG_COMMON(error,module)      (error | ERRG_MID_MASK(module) | ERRG_PID_MASK(CURR_PID))
#define ERRG_SPECIFIC(error, module)   ((error+ERR_LAST_COMMON) | ERRG_MID_MASK(module) | ERRG_PID_MASK(CURR_PID))

/* Common errors generator */
#define ERRG_GEN_COMMON(mid) \
   mid##__RET_SUCCESS            = ERRG_COMMON(RET_SUCCESS,mid),\
   mid##__ERR_UNEXPECTED         = ERRG_COMMON(ERR_UNEXPECTED,mid),\
   mid##__ERR_INVALID_ARGS       = ERRG_COMMON(ERR_INVALID_ARGS,mid),\
   mid##__ERR_OUT_OF_MEM         = ERRG_COMMON(ERR_OUT_OF_MEM,mid),\
   mid##__ERR_OUT_OF_RSRCS       = ERRG_COMMON(ERR_OUT_OF_RSRCS,mid),\
   mid##__ERR_NULL_PTR           = ERRG_COMMON(ERR_NULL_PTR,mid),\
   mid##__ERR_TIMEOUT            = ERRG_COMMON(ERR_TIMEOUT,mid),\
   mid##__ERR_IO_ERROR           = ERRG_COMMON(ERR_IO_ERROR,mid),\
   mid##__ERR_NOT_SUPPORTED      = ERRG_COMMON(ERR_NOT_SUPPORTED,mid),\
   mid##__ERR_ILLEGAL_STATE      = ERRG_COMMON(ERR_ILLEGAL_STATE,mid),\
   mid##__ERR_INVALID_STREAM_ID  = ERRG_COMMON(ERR_INVALID_STREAM_ID,mid),\

/* Assert definition */
// The fputs() should be replaced with internal log function
#define abort_msg(string)           \
{                                   \
   fputs((char *)string, stderr);   \
   fflush(stderr);                  \
   while(1);                        \
}

#define assert_func(expr, string)  { if (!expr) abort_msg(string); }

#define _nassert(expr)  { }

#define STR(expr) (#expr)

#ifdef CEVA
   #include "assert.h"
#elif EV72
   #include "assert.h"
#elif !defined(_assert)
   #if !defined(DEBUG)
      #define _assert(ignore) ((void)0)
   #elif defined(NASSERT)
      #define _assert(expr) nassert(expr)
   #else
      #define _assert(expr)  assert_func((expr != 0),                            \
                        "Assertion failed, (" STR(expr) "), file " __FILE__  ", line " STR(__LINE__) "\n")
   #endif /* Assert definition */
#endif // #ifdef CEVA

/****************************************************************************
 ***************      G L O B A L         T Y P E D E F S     ***************
 ****************************************************************************/

typedef enum
{
   RET_SUCCESS             = 0,
   ERR_UNEXPECTED          = 1,
   ERR_INVALID_ARGS        = 2,
   ERR_OUT_OF_MEM          = 3,
   ERR_OUT_OF_RSRCS        = 4,
   ERR_NULL_PTR            = 5,
   ERR_TIMEOUT             = 6,
   ERR_IO_ERROR            = 7,
   ERR_NOT_SUPPORTED       = 8,
   ERR_ILLEGAL_STATE       = 9,
   ERR_INVALID_STREAM_ID   = 10,
   ERR_LAST_COMMON         = ERR_INVALID_STREAM_ID
} ERRG_commonErrE;

typedef enum
{
   //Convention is:
   //MOD_NAME__ERR_NAME
   ERRG_GEN_COMMON(SVC_MNGR)
   SVC_MNGR__ERR_CREATE_GP_HOST_GEN_MEM_POOL_FAIL        = ERRG_SPECIFIC(1, SVC_MNGR),
   SVC_MNGR__ERR_CREATE_GP_HOST_SVC_MNGR_MEM_POOL_FAIL   = ERRG_SPECIFIC(2, SVC_MNGR),
   SVC_MNGR__ERR_CREATE_GP_HOST_VIDEO_MEM_POOL_FAIL      = ERRG_SPECIFIC(3, SVC_MNGR),
   SVC_MNGR__ERR_CREATE_GP_HOST_DEPTH_MEM_POOL_FAIL      = ERRG_SPECIFIC(4, SVC_MNGR),
   SVC_MNGR__ERR_CREATE_GP_HOST_HEAD_MEM_POOL_FAIL       = ERRG_SPECIFIC(5, SVC_MNGR),
   SVC_MNGR__ERR_CREATE_GP_HOST_CAMERA_MEM_POOL_FAIL     = ERRG_SPECIFIC(6, SVC_MNGR),
   SVC_MNGR__ERR_CREATE_GP_HOST_LOGGER_MEM_POOL_FAIL     = ERRG_SPECIFIC(7, SVC_MNGR),
   SVC_MNGR__ERR_CREATE_GP_CEVA_GEN_MEM_POOL_FAIL        = ERRG_SPECIFIC(8, SVC_MNGR),
   SVC_MNGR__ERR_CREATE_GP_CEVA_VIDEO_MEM_POOL_FAIL      = ERRG_SPECIFIC(9, SVC_MNGR),
   SVC_MNGR__ERR_CREATE_GP_CEVA_DEPTH_MEM_POOL_FAIL      = ERRG_SPECIFIC(10, SVC_MNGR),
   SVC_MNGR__ERR_CREATE_GP_CEVA_HEAD_MEM_POOL_FAIL       = ERRG_SPECIFIC(11, SVC_MNGR),
   SVC_MNGR__ERR_CREATE_GP_CEVA_CAMERA_MEM_POOL_FAIL     = ERRG_SPECIFIC(12, SVC_MNGR),
   SVC_MNGR__ERR_CREATE_GP_HOST_CONNECTION_FAIL          = ERRG_SPECIFIC(13, SVC_MNGR),
   SVC_MNGR__ERR_CREATE_GP_CEVA_CONNECTION_FAIL          = ERRG_SPECIFIC(14, SVC_MNGR),

   ERRG_GEN_COMMON(SVC_COM)
   SVC_COM__ERR_OPEN                = ERRG_SPECIFIC(1, SVC_COM),
   SVC_COM__ERR_SEND                = ERRG_SPECIFIC(2, SVC_COM),
   SVC_COM__ERR_INVALID_CHANEL_NUM  = ERRG_SPECIFIC(3, SVC_COM),

   ERRG_GEN_COMMON(IAE)
   // init IAE module command error types
   IAE__ERR_INIT_FAIL_WRONG_PAL_HANDLE                            = ERRG_SPECIFIC(1, IAE),
   // open IAE module command error types
   IAE__ERR_OPEN_FAIL_DRV_NOT_CLOSED                              = ERRG_SPECIFIC(2, IAE),
   IAE__ERR_OPEN_FAIL_NULL_PARAMS                                 = ERRG_SPECIFIC(3, IAE),
   IAE__ERR_OPEN_FAIL_NULL_REGS_ADDRESS                           = ERRG_SPECIFIC(4, IAE),
   // IAE module ioctl command error types
   IAE__ERR_IOCTL_FAIL_DRV_NOT_OPEN                               = ERRG_SPECIFIC(5, IAE),
   IAE__ERR_IOCTL_FAIL_UNKNOWN_CMD_CODE                           = ERRG_SPECIFIC(6, IAE),
   IAE__ERR_IOCTL_FAIL_WRONG_HANDLE                               = ERRG_SPECIFIC(7, IAE),
   IAE__ERR_ALN_CONTROL_FAIL                                      = ERRG_SPECIFIC(8, IAE),
   IAE__ERR_BYPASS_FAIL_WRONG_MODULE                              = ERRG_SPECIFIC(9, IAE),
   IAE__ERR_ENABLE_FAIL_WRONG_MODULE                              = ERRG_SPECIFIC(10, IAE),
   IAE__ERR_IIM_ALN_FAIL_WRONG_MODULE                             = ERRG_SPECIFIC(11, IAE),
   IAE__ERR_FRAME_GEN_FAIL_WRONG_MODULE                           = ERRG_SPECIFIC(12, IAE),
   IAE__ERR_PORCH_CONFIG_FAIL_WRONG_CAMERA                        = ERRG_SPECIFIC(13, IAE),
   IAE__ERR_IAU_FAIL_WRONG_MODULE                                 = ERRG_SPECIFIC(14, IAE),
   IAE__ERR_HISTOGRAM_CFG_FAIL_WRONG_IAU                          = ERRG_SPECIFIC(15, IAE),
   IAE__ERR_IB_CFG_FAIL_WRONG_IAU                                 = ERRG_SPECIFIC(16, IAE),
   IAE__ERR_WB_CFG_FAIL_WRONG_IAU                                 = ERRG_SPECIFIC(17, IAE),
   IAE__ERR_CSC_CFG_FAIL_WRONG_IAU                                = ERRG_SPECIFIC(18, IAE),
   IAE__ERR_DATA_FORMAT_FAIL_WRONG_IAU                            = ERRG_SPECIFIC(19, IAE),
   IAE__ERR_DSR_FAIL_WRONG_IAU                                    = ERRG_SPECIFIC(20, IAE),
   IAE__ERR_FRR_FAIL_WRONG_IAU                                    = ERRG_SPECIFIC(21, IAE),
   IAE__ERR_SLU_CTRL_FAIL_WRONG_IAU                               = ERRG_SPECIFIC(22, IAE),
   IAE__ERR_SLU_CROP_FAIL                                         = ERRG_SPECIFIC(23, IAE),
   IAE__ERR_FRAME_ID_READ_FAIL                                    = ERRG_SPECIFIC(24, IAE),
   IAE__ERR_FRAME_TS_READ_FAIL                                    = ERRG_SPECIFIC(25, IAE),
   IAE__ERR_SLU_PAR_CONTROL_FAIL                                  = ERRG_SPECIFIC(26, IAE),
   IAE__ERR_SET_ISR_PARAMS_FAIL                                   = ERRG_SPECIFIC(27, IAE),
   IAE__ERR_ENABLE_ISR_FAIL                                       = ERRG_SPECIFIC(28, IAE),

   ERRG_GEN_COMMON(DPE)
   // init DPE module command error types
   DPE__ERR_INIT_FAIL_WRONG_PAL_HANDLE                            = ERRG_SPECIFIC(1, DPE),
   // open DPE module command error types
   DPE__ERR_OPEN_FAIL_DRV_NOT_CLOSED                              = ERRG_SPECIFIC(2, DPE),
   DPE__ERR_OPEN_FAIL_NULL_PARAMS                                 = ERRG_SPECIFIC(3, DPE),
   DPE__ERR_OPEN_FAIL_NULL_REGS_ADDRESS                           = ERRG_SPECIFIC(4, DPE),
   // IAE module ioctl command error types
   DPE__ERR_IOCTL_FAIL_DRV_NOT_OPEN                               = ERRG_SPECIFIC(5, DPE),
   DPE__ERR_IOCTL_FAIL_UNKNOWN_CMD_CODE                           = ERRG_SPECIFIC(6, DPE),
   DPE__ERR_IOCTL_FAIL_WRONG_HANDLE                               = ERRG_SPECIFIC(7, DPE),
   DPE__ERR_SET_DISP2DEPTH_REFINE_FAIL_WRONG_BLOCK_ID             = ERRG_SPECIFIC(8, DPE),
   DPE__ERR_SET_MASK_COND_FAIL_WRONG_COND_TYPE                    = ERRG_SPECIFIC(9, DPE),
   DPE__ERR_SET_IMG_BLOCKS_FAIL_WRONG_NUM_BLOCKS                  = ERRG_SPECIFIC(10, DPE),
   DPE__ERR_INTEERUPT_CLR_FAIL_WRONG_NUM                          = ERRG_SPECIFIC(11, DPE),
   DPE__ERR_SET_MUX_OUTPUT_FAIL_WRONG_PARAM                       = ERRG_SPECIFIC(12, DPE),
   DPE__ERR_GET_INTEERUPT_FAIL_WRONG_NUM                          = ERRG_SPECIFIC(13, DPE),
   DPE__ERR_INTEERUPT_CFG_FAIL_WRONG_NUM                          = ERRG_SPECIFIC(14, DPE),
   DPE__ERR_SET_ISR_PARAMS_FAIL                                   = ERRG_SPECIFIC(15, DPE),
   DPE__ERR_ENABLE_ISR_FAIL                                       = ERRG_SPECIFIC(16, DPE),
   DPE__ERR_SET_DISP_RANGE_BAD_RANGE                              = ERRG_SPECIFIC(17, DPE),

   ERRG_GEN_COMMON(CDE)
   // init CDE module command error types
   CDE__ERR_INIT_FAIL_WRONG_PAL_HANDLE          = ERRG_SPECIFIC(1, CDE),
   CDE__ERR_INIT_FAIL_MNGR_FAIL                 = ERRG_SPECIFIC(2, CDE),
   CDE__ERR_INIT_FAIL_DRV_FAIL                  = ERRG_SPECIFIC(3, CDE),
   // open CDE module command error types
   CDE__ERR_OPEN_FAIL_MNGR_NOT_CLOSED           = ERRG_SPECIFIC(4, CDE),
   CDE__ERR_OPEN_FAIL_DRV_NOT_CLOSED            = ERRG_SPECIFIC(5, CDE),
   CDE__ERR_OPEN_FAIL_NULL_PARAMS               = ERRG_SPECIFIC(6, CDE),
   CDE__ERR_OPEN_FAIL_DRV_NULL_REGS_ADDRESS     = ERRG_SPECIFIC(7, CDE),
   CDE__ERR_OPEN_FAIL_DRV_DESCRIPTORS_INIT_FAIL = ERRG_SPECIFIC(8, CDE),
   // CDE module ioctl command error types
   CDE__ERR_IOCTL_FAIL_MNGR_NOT_OPEN            = ERRG_SPECIFIC(9, CDE),
   CDE__ERR_IOCTL_FAIL_UNKNOWN_CMD_CODE         = ERRG_SPECIFIC(10, CDE),
   // CDE chanel close ioctl command error types
   CDE__ERR_CH_OPEN_IOCTL_NULL_HANDLE           = ERRG_SPECIFIC(11, CDE),
   CDE__ERR_CH_OPEN_IOCTL_CH_NOT_CLOSED         = ERRG_SPECIFIC(12, CDE),
   CDE__ERR_CH_OPEN_IOCTL_OPEN_DRV_FAIL         = ERRG_SPECIFIC(13, CDE),
   CDE__ERR_CH_OPEN_IOCTL_SET_DEF_PARAMS_FAIL   = ERRG_SPECIFIC(14, CDE),
   CDE__ERR_DRV_CH_CFG_NULL_HANDLE              = ERRG_SPECIFIC(15, CDE),
   CDE__ERR_DRV_CH_CFG_CH_NOT_OPEN              = ERRG_SPECIFIC(16, CDE),
   CDE__ERR_DRV_CH_CFG_DESC_CFG_FAIL            = ERRG_SPECIFIC(17, CDE),
   CDE__ERR_DRV_CH_CFG_REGS_CFG_FAIL            = ERRG_SPECIFIC(18, CDE),
   // CDE chanel set params ioctl command error types
   CDE__ERR_CH_SET_PARAMS_IOCTL_NULL_HANDLE     = ERRG_SPECIFIC(19, CDE),
   CDE__ERR_CH_SET_PARAMS_IOCTL_WRONG_CH        = ERRG_SPECIFIC(20, CDE),
   CDE__ERR_CH_SET_PARAMS_IOCTL_CH_NOT_OPEN     = ERRG_SPECIFIC(21, CDE),
   // CDE chanel set params ioctl command error types
   CDE__ERR_CH_GET_PARAMS_IOCTL_NULL_HANDLE     = ERRG_SPECIFIC(22, CDE),
   CDE__ERR_CH_GET_PARAMS_IOCTL_CH_NOT_OPEN     = ERRG_SPECIFIC(23, CDE),
   // CDE GP chanel set params ioctl command error types
   CDE__ERR_GP_CH_SET_PARAMS_IOCTL_NULL_HANDLE  = ERRG_SPECIFIC(24, CDE),
   CDE__ERR_GP_CH_SET_PARAMS_IOCTL_WRONG_CH     = ERRG_SPECIFIC(25, CDE),
   CDE__ERR_GP_CH_SET_PARAMS_IOCTL_CH_NOT_OPEN  = ERRG_SPECIFIC(26, CDE),
   // CDE chanel set default params ioctl command error types
   CDE__ERR_CH_SET_DEF_PARAMS_IOCTL_NULL_HANDLE = ERRG_SPECIFIC(27, CDE),
   CDE__ERR_CH_SET_DEF_PARAMS_IOCTL_CH_NOT_OPEN = ERRG_SPECIFIC(28, CDE),
   // CDE chanel close ioctl command error types
   CDE__ERR_CH_CLOSE_IOCTL_NULL_HANDLE          = ERRG_SPECIFIC(29, CDE),
   CDE__ERR_CH_CLOSE_IOCTL_CH_IS_CLOSED         = ERRG_SPECIFIC(30, CDE),
   CDE__ERR_CH_CLOSE_IOCTL_CH_NOT_OPEN          = ERRG_SPECIFIC(31, CDE),
   CDE__ERR_CH_CLOSE_IOCTL_INIT_REGS_FAIL       = ERRG_SPECIFIC(32, CDE),
   CDE__ERR_CH_CLOSE_IOCTL_REMOVE_DESCR_FAIL    = ERRG_SPECIFIC(33, CDE),
   // CDE chanel deactivate ioctl command error types
   CDE__ERR_CH_ACTIVATE_IOCTL_NULL_HANDLE       = ERRG_SPECIFIC(34, CDE),
   CDE__ERR_CH_ACTIVATE_IOCTL_CH_NOT_OPEN       = ERRG_SPECIFIC(35, CDE),
   CDE__ERR_DRV_CH_ACTIVATE_NULL_HANDLE         = ERRG_SPECIFIC(36, CDE),
   CDE__ERR_DRV_CH_ACTIVATE_CH_NOT_OPEN         = ERRG_SPECIFIC(37, CDE),
   // CDE chanel deactivate ioctl command error types
   CDE__ERR_CH_DEACTIVATE_IOCTL_NULL_HANDLE     = ERRG_SPECIFIC(38, CDE),
   CDE__ERR_CH_DEACTIVATE_IOCTL_CH_NOT_ACTIVE   = ERRG_SPECIFIC(39, CDE),
   CDE__ERR_DRV_CH_DEACTIVATE_NULL_HANDLE       = ERRG_SPECIFIC(40, CDE),
   CDE__ERR_DRV_CH_DEACTIVATE_CH_NOT_ACTIVE     = ERRG_SPECIFIC(41, CDE),
   CDE__ERR_DRV_CH_DEACTIVATE_CLEAR_LEFT_CMD    = ERRG_SPECIFIC(42, CDE),
   // CDE chanel polling ioctl command error types
   CDE__ERR_CH_POLLING_IOCTL_NULL_HANDLE        = ERRG_SPECIFIC(43, CDE),
   CDE__ERR_CH_POLLING_IOCTL_NO_FRAMES          = ERRG_SPECIFIC(44, CDE),
   CDE__ERR_DRV_CH_POLLING_NULL_HANDLE          = ERRG_SPECIFIC(45, CDE),
   CDE__ERR_DRV_CH_POLLING_CH_NOT_ACTIVE        = ERRG_SPECIFIC(46, CDE),
   // CDE chanel print debug info ioctl command error types
   CDE__ERR_CH_PRINT_DEBUG_IOCTL_NULL_HANDLE    = ERRG_SPECIFIC(47, CDE),
   CDE__ERR_CH_PRINT_DEBUG_IOCTL_CH_CLOSE       = ERRG_SPECIFIC(48, CDE),
   CDE__ERR_DRV_CH_PRINT_DEBUG_NULL_HANDLE      = ERRG_SPECIFIC(49, CDE),
   CDE__ERR_DRV_CH_PRINT_DEBUG_CH_CLOSE         = ERRG_SPECIFIC(50, CDE),
   CDE__ERR_SET_ISR_PARAMS_FAIL                 = ERRG_SPECIFIC(51, CDE),
   // CDE Register to Memory errors
   CDE__ERR_SET_CCR_FAIL                        = ERRG_SPECIFIC(52, CDE),
      // CDE Register to Memory errors
   CDE__ERR_NO_METADATA_CONFIG                  = ERRG_SPECIFIC(53, CDE),

   ERRG_GEN_COMMON(CONN_LYR)
   CONN_LYR__ERR_INIT_CLS_FAIL                  = ERRG_SPECIFIC(1, CONN_LYR),
   CONN_LYR__ERR_NO_FREE_CONNECTIONS            = ERRG_SPECIFIC(2, CONN_LYR),
   CONN_LYR__ERR_SEND_QUE_OVERFLOW              = ERRG_SPECIFIC(3, CONN_LYR),
   CONN_LYR__ERR_CONNECTION_IS_DOWN             = ERRG_SPECIFIC(4, CONN_LYR),
   CONN_LYR__ERR_RECV_ERROR                     = ERRG_SPECIFIC(5, CONN_LYR),
   CONN_LYR__ERR_RECV_TIMEOUT                   = ERRG_SPECIFIC(6, CONN_LYR),

   ERRG_GEN_COMMON(CONFIG)
   CONFIG__ERR_MISSING_OPT                      = ERRG_SPECIFIC(1, CONFIG),

   ERRG_GEN_COMMON(INU_FDK)

   ERRG_GEN_COMMON(INU_COMM)
   INU_COMM__ERR_SEND_QUEUE                    = ERRG_SPECIFIC(1, INU_COMM),

   ERRG_GEN_COMMON(INU_LM)

   ERRG_GEN_COMMON(INU_DATA)

   ERRG_GEN_COMMON(INU_CVA_DATA)

   ERRG_GEN_COMMON(INU_DEVICE)
   INU_DEVICE__ERR_INUUSB_INIT_FAIL           = ERRG_SPECIFIC(1, INU_DEVICE),
   INU_DEVICE__ERR_INUUSB_DEINIT_FAIL         = ERRG_SPECIFIC(2, INU_DEVICE),
   INU_DEVICE__ERR_INUUSB_HP_CALLBACK_FAIL    = ERRG_SPECIFIC(3, INU_DEVICE),

   ERRG_GEN_COMMON(INU_FUNCTION)
   INU_FUNCTION__ERR_PIPE_FAIL                = ERRG_SPECIFIC(1, INU_FUNCTION),

   ERRG_GEN_COMMON(INU_GRAPH)
   INU_GRAPH__ERR_UNSUPPORTED_FUNCTION = ERRG_SPECIFIC(1, INU_GRAPH),
   INU_GRAPH__ERR_UNSUPPORTED_DATA     = ERRG_SPECIFIC(2, INU_GRAPH),

   ERRG_GEN_COMMON(INU_REF)
   INU_REF__ERR_CONN_DOWN                     = ERRG_SPECIFIC(1, INU_REF),

   ERRG_GEN_COMMON(INU_STREAMER)

   ERRG_GEN_COMMON(INU_NODE)

   ERRG_GEN_COMMON(INU_FACTORY)

   ERRG_GEN_COMMON(INU_IMU_DATA)

   ERRG_GEN_COMMON(INU_IMU)
   INU_IMU__ERR_WRITE_FILE = ERRG_SPECIFIC(1, INU_IMU),

   ERRG_GEN_COMMON(INU_TEMPERATURE_DATA)

   ERRG_GEN_COMMON(INU_TEMPERATURE)

   ERRG_GEN_COMMON(HCG_MNGR)

   ERRG_GEN_COMMON(INU_SENSORS_GROUP)

   ERRG_GEN_COMMON(INU_SOC_CHANNEL)

   ERRG_GEN_COMMON(INU_ISP_CHANNEL)

   ERRG_GEN_COMMON(INU_CVA_CHANNEL)

   ERRG_GEN_COMMON(INU_IMAGE)

   ERRG_GEN_COMMON(INU_SOC_WRITER)

   ERRG_GEN_COMMON(INU_HISTOGRAM)

   ERRG_GEN_COMMON(INU_SENSOR_CONTROL)

   ERRG_GEN_COMMON(INU_COMPRESS)

   ERRG_GEN_COMMON(INU_SENSOR)

   ERRG_GEN_COMMON(INU_FAST_ORB)

   ERRG_GEN_COMMON(INU_CDNN)
   INU_CDNN__ERR_INVALID_NETWORK_ID             = ERRG_SPECIFIC(1,INU_CDNN),

   ERRG_GEN_COMMON(INU_VISION_PROC)

   ERRG_GEN_COMMON(INU_SLAM)

   ERRG_GEN_COMMON(INU_DPE_PP)

   ERRG_GEN_COMMON(INU_PP)

   ERRG_GEN_COMMON(INU_TSNR_CALC)

   ERRG_GEN_COMMON(INU_LOAD_NETWORK)

   ERRG_GEN_COMMON(INU_LOAD_BACKGROUND)

   ERRG_GEN_COMMON(SENSOR)
   SENSOR__ERR_CONFIGUTATION_FAILED             = ERRG_SPECIFIC(1,SENSOR),
   SENSOR__ERR_EXP_TIME_FAILED                  = ERRG_SPECIFIC(2,SENSOR),
   SENSOR__ERR_AUTO_EXP_NOT_LOCKED_FAIL         = ERRG_SPECIFIC(3,SENSOR),
   SENSOR__ERR_AUTO_EXP_MODE_SET_FAILED         = ERRG_SPECIFIC(4,SENSOR),
   SENSOR__ERR_BAD_SENSOR_FORMAT                = ERRG_SPECIFIC(5,SENSOR),
   SENSOR__ERR_USR_INIT_FAILED                  = ERRG_SPECIFIC(6,SENSOR),
   SENSOR__ERR_BAD_INIT_TABLE                   = ERRG_SPECIFIC(7,SENSOR),
   SENSOR__ERR_WRONG_POWER_FREQUENCY            = ERRG_SPECIFIC(8,SENSOR),
   SENSOR__ERR_START_SENSOR_FAIL_WRONG_PARAM    = ERRG_SPECIFIC(9,SENSOR),
   SENSOR__ERR_OPEN_DEVICE_FAIL                 = ERRG_SPECIFIC(10,SENSOR),
   SENSOR__ERR_CLOSE_DEVICE_FAIL                = ERRG_SPECIFIC(11,SENSOR),
   SENSOR__ERR_INIT_SENSOR_FAIL_WRONG_MODEL     = ERRG_SPECIFIC(12,SENSOR),
   SENSOR__ERR_SET_OUT_FORMAT_FAIL_WRONG_FORMAT = ERRG_SPECIFIC(13,SENSOR),

   ERRG_GEN_COMMON(HW_MNGR)
   HW_MNGR__ERR_CREATE_THREAD_FAIL                 = ERRG_SPECIFIC(1, HW_MNGR),
   HW_MNGR__LOAD_CONFIG_FAIL                       = ERRG_SPECIFIC(2, HW_MNGR),
   HW_MNGR__ERR_POLL_INACTIVE_USER                 = ERRG_SPECIFIC(3, HW_MNGR),
   HW_MNGR__ERR_LOAD_IAE_LUT_FAIL                  = ERRG_SPECIFIC(4, HW_MNGR),
   HW_MNGR__ERR_POLL_TIME_OUT                      = ERRG_SPECIFIC(5, HW_MNGR),
   HW_MNGR__ERR_OUT_CHAN_FREE_TIMEOUT              = ERRG_SPECIFIC(6, HW_MNGR),
   HW_MNGR__ERR_DELETE_MSG_Q_FAIL                  = ERRG_SPECIFIC(7, HW_MNGR),
   HW_MNGR__ERR_CALIB_FAIL                         = ERRG_SPECIFIC(8, HW_MNGR),

   ERRG_GEN_COMMON(PAL)
   PAL__ERR_INIT_FAIL               = ERRG_SPECIFIC(1,PAL),
   PAL__ERR_INVALID_DEVICE_ID       = ERRG_SPECIFIC(2,PAL),
   PAL__ERR_INVALID_DEVICE_HANDLE   = ERRG_SPECIFIC(3,PAL),
   PAL__ERR_INVALID_OPEN_FUNC       = ERRG_SPECIFIC(4,PAL),
   PAL__ERR_INVALID_CLOSE_FUNC      = ERRG_SPECIFIC(5,PAL),
   PAL__ERR_INVALID_READ_FUNC       = ERRG_SPECIFIC(6,PAL),
   PAL__ERR_INVALID_WRITE_FUNC      = ERRG_SPECIFIC(7,PAL),
   PAL__ERR_INVALID_IOCTL_FUNC      = ERRG_SPECIFIC(8,PAL),

   ERRG_GEN_COMMON(INIT)
   INIT__ERR_GENERAL_FAIL                 = ERRG_SPECIFIC(1,INIT),
   INIT__ERR_SCHEDULER_INIT_FAIL          = ERRG_SPECIFIC(2,INIT),
   INIT__ERR_OPEN_VDMA_FAIL               = ERRG_SPECIFIC(3,INIT),

   ERRG_GEN_COMMON(CIREG)

   ERRG_GEN_COMMON(MEM_POOL)
   MEM_POOL__ERR_ALLOC_BUF_FAIL_NULL_HANDLE     = ERRG_SPECIFIC(1, MEM_POOL),
   MEM_POOL__ERR_ALLOC_BUF_FAIL_BIG_BUF_SIZE    = ERRG_SPECIFIC(2, MEM_POOL),
   MEM_POOL__ERR_ALLOC_BUF_FAIL_NO_BUF_IN_POOL  = ERRG_SPECIFIC(3, MEM_POOL),

   ERRG_GEN_COMMON(INU_LOGGER)
   LOGGER__QUE_TIMEOUT              = ERRG_SPECIFIC(1, INU_LOGGER),
   LOGGER__ERR_CREATE_THREAD_FAIL   = ERRG_SPECIFIC(2, INU_LOGGER),
   LOGGER__ERR_THREAD_ALREADY_EXIST = ERRG_SPECIFIC(3, INU_LOGGER),
   LOGGER__ERR_CREATE_MSG_Q_FAIL    = ERRG_SPECIFIC(4, INU_LOGGER),

   ERRG_GEN_COMMON(I2C)
   I2C__ERR_UPDATE_ADDRESS_I2C_BUSY                   = ERRG_SPECIFIC(1,I2C),
   I2C__ERR_WRITE_I2C_BUSY                            = ERRG_SPECIFIC(2,I2C),
   I2C__ERR_READ_I2C_BUSY                             = ERRG_SPECIFIC(3,I2C),
   I2C__ERR_NO_ACK                                    = ERRG_SPECIFIC(4,I2C),
   I2C__ERR_WRITE_I2C_ABORT                           = ERRG_SPECIFIC(5,I2C),
   I2C__ERR_READ_FAIL_TO_RECEIVE_ALL_DATA             = ERRG_SPECIFIC(6,I2C),
   I2C__ERR_IOCTL_FAIL_WRONG_HANDLE                   = ERRG_SPECIFIC(7,I2C),
   I2C__ERR_IOCTL_FAIL_UNKNOWN_CMD_CODE               = ERRG_SPECIFIC(8,I2C),
   I2C__ERR_IOCTL_FAIL_DRV_NOT_OPEN                   = ERRG_SPECIFIC(9,I2C),
   I2C__ERR_INIT_FAIL_WRONG_PAL_HANDLE                = ERRG_SPECIFIC(10,I2C),
   I2C__ERR_OPEN_FAIL_NULL_PERIPH_ADDRESS             = ERRG_SPECIFIC(11,I2C),
   I2C__ERR_OPEN_FAIL_NULL_PARAMS                     = ERRG_SPECIFIC(12,I2C),
   I2C__ERR_OPEN_FAIL_DRV_NOT_CLOSED                  = ERRG_SPECIFIC(13,I2C),
   I2C__ERR_FAILED_TO_ENABLE_PERIHERAL                = ERRG_SPECIFIC(14,I2C),
   I2C__ERR_FAILED_TO_DISABLE_PERIHERAL               = ERRG_SPECIFIC(15,I2C),
   I2C__ERR_ILLEGAL_NUM_OF_BYTES_TO_WRITE             = ERRG_SPECIFIC(16,I2C),
   I2C__ERR_ILLEGAL_NUM_OF_BYTES_TO_READ              = ERRG_SPECIFIC(17,I2C),
   I2C__ERR_WRITE_ILLEGAL_NUM_OF_ADDRESS_ACCESS_SIZE  = ERRG_SPECIFIC(18,I2C),
   I2C__ERR_READ_ILLEGAL_NUM_OF_ADDRESS_ACCESS_SIZE   = ERRG_SPECIFIC(19,I2C),
   I2C__ERR_INIT_FAIL                                 = ERRG_SPECIFIC(20,I2C),
   I2C__ERR_OPEN_HL_DRV_FAIL_WRONG_DEVICE_ID          = ERRG_SPECIFIC(21,I2C),

   ERRG_GEN_COMMON(DATA_BASE)
   DATA_BASE__ERR_MODULE_ALREADY_OPEN     = ERRG_SPECIFIC(1,DATA_BASE),
   DATA_BASE__ERR_MODULE_NOT_OPEN         = ERRG_SPECIFIC(2,DATA_BASE),
   DATA_BASE__ERR_CPMUTEX_ACQUIRE_FAIL    = ERRG_SPECIFIC(3,DATA_BASE),

   ERRG_GEN_COMMON(MEM_MAP)
   MEM_MAP__ERR_REGION_NO_FOUND           = ERRG_SPECIFIC(1,MEM_MAP),

   ERRG_GEN_COMMON(OS_LYR)
   OS_LYR__ERR_MEM_FD_OPEN_FAIL           = ERRG_SPECIFIC(1,OS_LYR),
   OS_LYR__ERR_REGION_MAP_FAIL            = ERRG_SPECIFIC(2,OS_LYR),
   OS_LYR__ERR_REGION_UNMAP_FAIL          = ERRG_SPECIFIC(3,OS_LYR),
   OS_LYR__ERR_WAIT_THREAD_FAIL           = ERRG_SPECIFIC(4,OS_LYR),
   OS_LYR__ERR_COMMAND_FAIL               = ERRG_SPECIFIC(5,OS_LYR),
   OS_LYR__ERR_FILE_OPEN_FAIL             = ERRG_SPECIFIC(6,OS_LYR),


   ERRG_GEN_COMMON(HW_REGS)
   HW_REGS__TABLE_FULL                       = ERRG_SPECIFIC(1, HW_REGS),
   HW_REGS__INSERT_WRONG_PARAM_TO_TABLE      = ERRG_SPECIFIC(2, HW_REGS),
   HW_REGS__ERR_WRITE_SOC_REG_FAIL           = ERRG_SPECIFIC(3, HW_REGS),
   HW_REGS__ERR_READ_SOC_REG_FAIL            = ERRG_SPECIFIC(4, HW_REGS),

   ERRG_GEN_COMMON(MSG_BOX)
   MSG_BOX__ERR_INIT_FAIL                 = ERRG_SPECIFIC(1,MSG_BOX),
   MSG_BOX__ERR_OPEN_FAIL                 = ERRG_SPECIFIC(2,MSG_BOX),
   MSG_BOX__ERR_ADD_MSG_FAIL_BOX_FULL     = ERRG_SPECIFIC(3,MSG_BOX),
   MSG_BOX__ERR_BOX_IS_EMPTY              = ERRG_SPECIFIC(4,MSG_BOX),

   ERRG_GEN_COMMON(SERIAL)
   SERIAL__ERR_GENERAL_ERR                      = ERRG_SPECIFIC(1,SERIAL),
   SERIAL__ERR_OPEN_FAIL                        = ERRG_SPECIFIC(2,SERIAL),
   SERIAL__ERR_OPEN_FAIL_INVALID_HANDLE         = ERRG_SPECIFIC(3,SERIAL),
   SERIAL__ERR_CLOSE_FAIL                       = ERRG_SPECIFIC(4,SERIAL),
   SERIAL__ERR_SEND_FAIL                        = ERRG_SPECIFIC(5,SERIAL),
   SERIAL__ERR_SEND_FAIL_INVALID_HANDLE         = ERRG_SPECIFIC(6,SERIAL),
   SERIAL__ERR_RECV_FAIL                        = ERRG_SPECIFIC(7,SERIAL),
   SERIAL__ERR_RECV_FAIL_INVALID_HANDLE         = ERRG_SPECIFIC(8,SERIAL),
   SERIAL__ERR_READ_FAIL                        = ERRG_SPECIFIC(9,SERIAL),
   SERIAL__ERR_READ_TIME_OUT                    = ERRG_SPECIFIC(10,SERIAL),
   SERIAL__ERR_READ_BLOCK_FAIL_INVALID_HANDLE   = ERRG_SPECIFIC(11,SERIAL),

   ERRG_GEN_COMMON(QUEUE_LYR)
   QUEUE_LYR__ERR_GENERAL_ERR                   = ERRG_SPECIFIC(1,QUEUE_LYR),

   ERRG_GEN_COMMON(TCP_COM)
   TCP_COM__ERR_GENERAL_ERROR                   = ERRG_SPECIFIC(1,TCP_COM),
   TCP_COM__ERR_BIND_FAIL                       = ERRG_SPECIFIC(2,TCP_COM),
   TCP_COM__ERR_CONNECT_FAIL                    = ERRG_SPECIFIC(3,TCP_COM),
   TCP_COM__ERR_SOCKET_INIT_FAIL                = ERRG_SPECIFIC(4,TCP_COM),
   TCP_COM__ERR_SOCKET_ADDR_CREATE_FAIL         = ERRG_SPECIFIC(5,TCP_COM),

   ERRG_GEN_COMMON(UVC_COM)
   UVC_COM__ERR_OPEN_FAILED          = ERRG_SPECIFIC(1,USB_CTRL_COM),
   UVC_COM__ERR_CLOSE_FAILED         = ERRG_SPECIFIC(2,USB_CTRL_COM),
   UVC_COM__ERR_WRITE_FAILED         = ERRG_SPECIFIC(3,USB_CTRL_COM),
   UVC_COM__ERR_READ_FAILED          = ERRG_SPECIFIC(4,USB_CTRL_COM),
   UVC_COM__ERR_LSEEK_FAILED         = ERRG_SPECIFIC(5,USB_CTRL_COM),
   UVC_COM__ERR_DEV_NOT_INIT         = ERRG_SPECIFIC(6,USB_CTRL_COM),
   UVC_COM__ERR_LOST_CONNECTION      = ERRG_SPECIFIC(7,USB_CTRL_COM),

   ERRG_GEN_COMMON(UDP_COM)
   UDP_COM__ERR_GENERAL_ERROR                   = ERRG_SPECIFIC(1,UDP_COM),

   ERRG_GEN_COMMON(UART_COM)
   UART_COM__ERR_GENERAL_ERROR                  = ERRG_SPECIFIC(1, UART_COM),
   UART_COM__ERR_INIT_FAIL                      = ERRG_SPECIFIC(2, UART_COM),
   UART_COM__ERR_OPEN_FAIL                      = ERRG_SPECIFIC(3, UART_COM),
   UART_COM__ERR_CLOSE_FAIL                     = ERRG_SPECIFIC(4, UART_COM),
   UART_COM__ERR_SEND_FAIL                      = ERRG_SPECIFIC(5, UART_COM),

   ERRG_GEN_COMMON(MSGBOX_COM)
   MSGBOX_COM__ERR_GENERAL_ERROR                = ERRG_SPECIFIC(1,MSGBOX_COM),
   MSGBOX_COM__ERR_FAIL_ADD_MSG_LEN_TOO_LARGE   = ERRG_SPECIFIC(2,MSGBOX_COM),
   MSGBOX_COM__ERR_FAIL_REMOVE_MSG_LEN_TOO_LARGE= ERRG_SPECIFIC(3,MSGBOX_COM),
   MSGBOX_COM__ERR_FAIL_PEEK_MSG_LEN_TOO_LARGE  = ERRG_SPECIFIC(4,MSGBOX_COM),

   ERRG_GEN_COMMON(GME)
   GME__ERR_INVALID_POWER_MODE            = ERRG_SPECIFIC(1,  GME),
   GME__ERR_INVALID_CLK_MODULE            = ERRG_SPECIFIC(2,  GME),
   GME__ERR_OPEN_FAIL_NULL_REGS_ADDRESS   = ERRG_SPECIFIC(3,  GME),
   GME__ERR_OPEN_FAIL_NULL_PARAMS         = ERRG_SPECIFIC(4,  GME),
   GME__ERR_OPEN_FAIL_DRV_NOT_CLOSED      = ERRG_SPECIFIC(5,  GME),
   GME__ERR_IOCTL_FAIL_WRONG_HANDLE       = ERRG_SPECIFIC(6,  GME),
   GME__ERR_IOCTL_FAIL_UNKNOWN_CMD_CODE   = ERRG_SPECIFIC(7,  GME),
   GME__ERR_IOCTL_FAIL_DRV_NOT_OPEN       = ERRG_SPECIFIC(8,  GME),
   GME__ERR_INIT_FAIL_WRONG_PAL_HANDLE    = ERRG_SPECIFIC(9,  GME),
   GME__ERR_INVALID_IO_PINS               = ERRG_SPECIFIC(10, GME),
   GME__ERR_GME_NOT_READY                 = ERRG_SPECIFIC(11, GME),

   ERRG_GEN_COMMON(CEVA_BOOT)
   CEVA__ERR_INVALID_CEVA_ID              = ERRG_SPECIFIC(1,CEVA_BOOT),
   CEVA__ERR_FAILED_TO_OPEN_FILE          = ERRG_SPECIFIC(2,CEVA_BOOT),
   CEVA__ERR_INVALID_DATA_MEM_ID          = ERRG_SPECIFIC(3,CEVA_BOOT),
   CEVA__ERR_CEVA_ALREADY_RUNNING         = ERRG_SPECIFIC(4,CEVA_BOOT),

   ERRG_GEN_COMMON(USB_CTRL_COM)
   USB_CTRL_COM__ERR_OPEN_FAILED          = ERRG_SPECIFIC(1,USB_CTRL_COM),
   USB_CTRL_COM__ERR_CLOSE_FAILED         = ERRG_SPECIFIC(2,USB_CTRL_COM),
   USB_CTRL_COM__ERR_WRITE_FAILED         = ERRG_SPECIFIC(3,USB_CTRL_COM),
   USB_CTRL_COM__ERR_READ_FAILED          = ERRG_SPECIFIC(4,USB_CTRL_COM),
   USB_CTRL_COM__ERR_LSEEK_FAILED         = ERRG_SPECIFIC(5,USB_CTRL_COM),
   USB_CTRL_COM__ERR_DEV_NOT_INIT         = ERRG_SPECIFIC(6,USB_CTRL_COM),
   USB_CTRL_COM__ERR_LOST_CONNECTION      = ERRG_SPECIFIC(7,USB_CTRL_COM),


   ERRG_GEN_COMMON(IPC_CTRL_COM)
   IPC_CTRL_COM__ERR_OPEN_FAILED          = ERRG_SPECIFIC(1,IPC_CTRL_COM),
   IPC_CTRL_COM__ERR_CLOSE_FAILED         = ERRG_SPECIFIC(2,IPC_CTRL_COM),
   IPC_CTRL_COM__ERR_SEND_FAILED          = ERRG_SPECIFIC(3,IPC_CTRL_COM),
   IPC_CTRL_COM__ERR_READ_FAILED          = ERRG_SPECIFIC(4,IPC_CTRL_COM),
   IPC_CTRL_COM__ERR_DEV_NOT_INIT         = ERRG_SPECIFIC(5,IPC_CTRL_COM),

   ERRG_GEN_COMMON(SYSTEM)
   SYSTEM__ERR_DB_IOCTL_FAIL_WRONG_PARAM                    = ERRG_SPECIFIC(1, SYSTEM),
   SYSTEM__ERR_WRITE_SENSOR_REG_FAIL_WRONG_SENSOR_TYPE      = ERRG_SPECIFIC(2, SYSTEM),
   SYSTEM__ERR_WRITE_SENSOR_REG_FAIL_WRONG_REG_WIDTH        = ERRG_SPECIFIC(3, SYSTEM),
   SYSTEM__ERR_WRITE_SENSOR_REG_FAIL_WRONG_REG_TYPE         = ERRG_SPECIFIC(4, SYSTEM),
   SYSTEM__ERR_READ_SENSOR_REG_FAIL_WRONG_SENSOR_TYPE       = ERRG_SPECIFIC(5, SYSTEM),
   SYSTEM__ERR_READ_SENSOR_REG_FAIL_WRONG_REG_WIDTH         = ERRG_SPECIFIC(6, SYSTEM),
   SYSTEM__ERR_READ_SENSOR_REG_FAIL_WRONG_REG_TYPE          = ERRG_SPECIFIC(7, SYSTEM),
   SYSTEM__ERR_SENSOR_CFG_FAIL_WRONG_CMD                    = ERRG_SPECIFIC(8, SYSTEM),
   SYSTEM__ERR_FLASH_SIZE_IS_BIGGER_THAN_MAX_FLASH_SIZE     = ERRG_SPECIFIC(9, SYSTEM),
   SYSTEM__ERR_FLASH_ADDRESS_IS_NOT_ALIGNED_256_BYTE        = ERRG_SPECIFIC(10, SYSTEM),
   SYSTEM__ERR_FLASH_IO_FLASH_HANDLE_IS_NULL                = ERRG_SPECIFIC(11, SYSTEM),
   SYSTEM__ERR_LOAD_CEVA_FAIL_WRONG_CEVA_ID                 = ERRG_SPECIFIC(12, SYSTEM),
   SYSTEM__ERR_INCOMPITABLE_VERSION_ID                      = ERRG_SPECIFIC(13, SYSTEM),

   ERRG_GEN_COMMON(GPIO)
   GPIO__ERR_OPEN_FAIL_NULL_REGS_ADDRESS  = ERRG_SPECIFIC(1, GPIO),
   GPIO__ERR_OPEN_FAIL_NULL_PARAMS        = ERRG_SPECIFIC(2, GPIO),
   GPIO__ERR_OPEN_FAIL_DRV_NOT_CLOSED     = ERRG_SPECIFIC(3, GPIO),
   GPIO__ERR_IOCTL_FAIL_WRONG_HANDLE      = ERRG_SPECIFIC(4, GPIO),
   GPIO__ERR_IOCTL_FAIL_UNKNOWN_CMD_CODE  = ERRG_SPECIFIC(5, GPIO),
   GPIO__ERR_IOCTL_FAIL_DRV_NOT_OPEN      = ERRG_SPECIFIC(6, GPIO),
   GPIO__ERR_INIT_FAIL_WRONG_PAL_HANDLE   = ERRG_SPECIFIC(7, GPIO),
   GPIO__ERR_GPIO_NUM_EXCEED_MAX          = ERRG_SPECIFIC(8, GPIO),

   ERRG_GEN_COMMON(SPI)
   SPI__ERR_ISPI_CLOCK_LOCK_FAIL       = ERRG_SPECIFIC(1, SPI),
   SPI__ERR_ISPI_TX_FAIL               = ERRG_SPECIFIC(2, SPI),
   SPI__ERR_ISPI_RX_FAIL               = ERRG_SPECIFIC(3, SPI),

   ERRG_GEN_COMMON(SPI_FLASH)
   SPI_FLASH__ERR_FLASH_STATUS_READ_FAIL           = ERRG_SPECIFIC(1, SPI_FLASH),
   SPI_FLASH__ERR_FLASH_WIP_ITR_FAIL               = ERRG_SPECIFIC(2, SPI_FLASH),
   SPI_FLASH__ERR_FLASH_INVALID_PARAMS             = ERRG_SPECIFIC(3, SPI_FLASH),
   SPI_FLASH__ERR_OPEN_FAIL_NULL_REGS_ADDRESS      = ERRG_SPECIFIC(4, SPI_FLASH),
   SPI_FLASH__ERR_OPEN_FAIL_NULL_PARAMS            = ERRG_SPECIFIC(5, SPI_FLASH),
   SPI_FLASH__ERR_OPEN_FAIL_DRV_NOT_CLOSED         = ERRG_SPECIFIC(6, SPI_FLASH),
   SPI_FLASH__ERR_IOCTL_FAIL_WRONG_HANDLE          = ERRG_SPECIFIC(7, SPI_FLASH),
   SPI_FLASH__ERR_IOCTL_FAIL_UNKNOWN_CMD_CODE      = ERRG_SPECIFIC(8, SPI_FLASH),
   SPI_FLASH__ERR_IOCTL_FAIL_DRV_NOT_OPEN          = ERRG_SPECIFIC(9, SPI_FLASH),
   SPI_FLASH__ERR_INIT_FAIL_WRONG_PAL_HANDLE       = ERRG_SPECIFIC(10, SPI_FLASH),
   SPI_FLASH__ERR_GPIO_NUM_EXCEED_MAX              = ERRG_SPECIFIC(11, SPI_FLASH),

   ERRG_GEN_COMMON(ICC)
   ICC__ERR_CREATE_MSG_Q_FAIL          = ERRG_SPECIFIC(1, ICC),
   ICC__ERR_DELETE_MSG_Q_FAIL          = ERRG_SPECIFIC(2, ICC),
   ICC__ERR_CMD_Q_FULL_FAIL            = ERRG_SPECIFIC(3, ICC),
   ICC__ERR_CMD_ACK_WRONG_STATE_FAIL   = ERRG_SPECIFIC(4, ICC),
   ICC__ERR_POLLING_TIMEOUT_FAIL       = ERRG_SPECIFIC(5, ICC),

   ERRG_GEN_COMMON(SENSORS_MNGR)
   SENSORS_MNGR__ERR_RESET_FAIL                    = ERRG_SPECIFIC(1, SENSORS_MNGR),
   SENSORS_MNGR__ERR_START_FAIL                    = ERRG_SPECIFIC(2, SENSORS_MNGR),
   SENSORS_MNGR__ERR_INIT_FAIL                     = ERRG_SPECIFIC(3, SENSORS_MNGR),
   SENSORS_MNGR__ERR_WRONG_FORMAT                  = ERRG_SPECIFIC(4, SENSORS_MNGR),
   SENSORS_MNGR__ERR_CFG_FAIL_WRONG_ID             = ERRG_SPECIFIC(5, SENSORS_MNGR),
   SENSORS_MNGR__ERR_FAIL_OPEN_SENSOR_DRV          = ERRG_SPECIFIC(6, SENSORS_MNGR),
   SENSORS_MNGR__ERR_SENSOR_CFG_FAIL_INVALID_RES   = ERRG_SPECIFIC(7, SENSORS_MNGR),
   SENSORS_MNGR__ERR_INVALID_SENSOR_SELECT         = ERRG_SPECIFIC(8, SENSORS_MNGR),
   SENSORS_MNGR__ERR_SENSOR_INACTIVE               = ERRG_SPECIFIC(9, SENSORS_MNGR),

   ERRG_GEN_COMMON(IAE_MNGR)
   IAE_MNGR__ERR_FAIL_TO_SEND_INT_MSG              = ERRG_SPECIFIC(1, IAE_MNGR),

   ERRG_GEN_COMMON(DPE_MNGR)
   DPE_MNGR__ERR_FAIL_TO_SEND_INT_MSG              = ERRG_SPECIFIC(1, DPE_MNGR),

   ERRG_GEN_COMMON(CDE_MNGR)
   CDE_MNGR__ERR_FAIL_TO_SEND_INT_MSG              = ERRG_SPECIFIC(1, CDE_MNGR),
   CDE_MNGR__ERR_WRONG_DIMENSIONS                  = ERRG_SPECIFIC(2, CDE_MNGR),
   CDE_MNGR__ERR_UPDATE_STREAMS_FAIL               = ERRG_SPECIFIC(3, CDE_MNGR),

   ERRG_GEN_COMMON(GME_MNGR)
   GME_MNGR__ERR_WRONG_CEVA_ID                     = ERRG_SPECIFIC(1, GME_MNGR),

   ERRG_GEN_COMMON(INU_MIPI_CHANNEL)

   ERRG_GEN_COMMON(MIPI)
   MIPI__ERR_INIT_FAIL_WRONG_PAL_HANDLE                            = ERRG_SPECIFIC(1, MIPI),
   MIPI__ERR_OPEN_FAIL_DRV_NOT_CLOSED                              = ERRG_SPECIFIC(2, MIPI),
   MIPI__ERR_OPEN_FAIL_NULL_PARAMS                                 = ERRG_SPECIFIC(3, MIPI),
   MIPI__ERR_OPEN_FAIL_NULL_REGS_ADDRESS                           = ERRG_SPECIFIC(4, MIPI),
   MIPI__ERR_IOCTL_FAIL_DRV_NOT_OPEN                               = ERRG_SPECIFIC(5, MIPI),
   MIPI__ERR_IOCTL_FAIL_UNKNOWN_CMD_CODE                           = ERRG_SPECIFIC(6, MIPI),
   MIPI__ERR_IOCTL_FAIL_WRONG_HANDLE                               = ERRG_SPECIFIC(7, MIPI),
   MIPI__ERR_FAIL_REACHING_STOP_STATE                              = ERRG_SPECIFIC(8, MIPI),

   ERRG_GEN_COMMON(MIPI_COM)

   ERRG_GEN_COMMON(ALT)

   ERRG_GEN_COMMON(MEM_MNGR)
   MEM_MNGR__ERR_INIT_FAIL_MEM_FAIL                  = ERRG_SPECIFIC(1, MEM_MNGR),
   MEM_MNGR__ERR_OPEN_FAIL_MEM_NOT_CLOSED            = ERRG_SPECIFIC(2, MEM_MNGR),
   MEM_MNGR__ERR_OPEN_FAIL_MEM_DDR_WRONG_ADDR        = ERRG_SPECIFIC(3, MEM_MNGR),
   MEM_MNGR__ERR_OPEN_FAIL_MEM_DDR_NULL_SIZE         = ERRG_SPECIFIC(4, MEM_MNGR),
   MEM_MNGR__ERR_OPEN_FAIL_MEM_IAE_WRONG_ADDR        = ERRG_SPECIFIC(5, MEM_MNGR),
   MEM_MNGR__ERR_OPEN_FAIL_MEM_DPE_WRONG_ADDR        = ERRG_SPECIFIC(6, MEM_MNGR),
   MEM_MNGR__ERR_MEM_BUF_CLOSE_FAIL                  = ERRG_SPECIFIC(7, MEM_MNGR),
   MEM_MNGR__ERR_MEM_BUF_OPEN_FAIL                   = ERRG_SPECIFIC(8, MEM_MNGR),

   ERRG_GEN_COMMON(PROJ)
   PROJ__ERR_OPEN_FAIL_NULL_REGS_ADDRESS  = ERRG_SPECIFIC(1, PROJ),
   PROJ__ERR_OPEN_FAIL_NULL_PARAMS        = ERRG_SPECIFIC(2, PROJ),
   PROJ__ERR_OPEN_FAIL_DRV_NOT_CLOSED     = ERRG_SPECIFIC(3, PROJ),
   PROJ__ERR_IOCTL_FAIL_WRONG_HANDLE      = ERRG_SPECIFIC(4, PROJ),
   PROJ__ERR_IOCTL_FAIL_UNKNOWN_CMD_CODE  = ERRG_SPECIFIC(5, PROJ),
   PROJ__ERR_IOCTL_FAIL_DRV_NOT_OPEN      = ERRG_SPECIFIC(6, PROJ),
   PROJ__ERR_INIT_FAIL_WRONG_PAL_HANDLE   = ERRG_SPECIFIC(7, PROJ),
   PROJ__ERR_PROJ_NUM_NOT_SUPPORTED       = ERRG_SPECIFIC(8, PROJ),

   ERRG_GEN_COMMON(XMLDB)
   XMLDB__EMPTY_ENTRY                 = ERRG_SPECIFIC(1, XMLDB),

   ERRG_GEN_COMMON(NUCFG)
   NUCFG__ERR_ILLEGAL_CHANNEL             = ERRG_SPECIFIC(1, NUCFG),
   NUCFG__ERR_CHANNEL_NOT_CONFIGURED      = ERRG_SPECIFIC(2, NUCFG),
   NUCFG__ERR_GRAPH_CREATE_FAILED         = ERRG_SPECIFIC(3, NUCFG),
   NUCFG__ERR_NO_PPU_SCL_ON_PATH          = ERRG_SPECIFIC(4, NUCFG),
   NUCFG__ERR_ILLEGAL_SCL_WIDTH           = ERRG_SPECIFIC(5, NUCFG),
   NUCFG__ERR_ILLEGAL_CHUNK_SIZE          = ERRG_SPECIFIC(6, NUCFG),
   NUCFG__ERR_PPU_UNSUPPORT_24BIT_OUTPUT  = ERRG_SPECIFIC(7, NUCFG),
   NUCFG__ERR_ILLEGAL_DPE_FUNC_CALL       = ERRG_SPECIFIC(8, NUCFG),

   ERRG_GEN_COMMON(PPE)

   ERRG_GEN_COMMON(PVT)

   ERRG_GEN_COMMON(PPE_MNGR)
   ERRG_GEN_COMMON(CLIENT_API)
   CLIENT_API__CONVERT_HANLDE_ALLOCATION = ERRG_SPECIFIC(1, CLIENT_API),
   CLIENT_API__CONVERT_ERROR         = ERRG_SPECIFIC(2, CLIENT_API),
   CLIENT_API__CONVERT_CLOSE_ERROR      = ERRG_SPECIFIC(3, CLIENT_API),

   ERRG_GEN_COMMON(CALIBRATION)
   CALIBRATION__ERR_MISSING_FIELDS_IN_INI_FILE = ERRG_SPECIFIC(1, CALIBRATION),

   ERRG_GEN_COMMON(CVA_MNGR)

   ERRG_GEN_COMMON(PSS)

   ERRG_GEN_COMMON(TRIGGER_MNGR)
   TRIGGER_MNGR__TRIGGER_SRC_NOT_FOUND       = ERRG_SPECIFIC(1, TRIGGER_MNGR),
   TRIGGER_MNGR__TS_TABLE_ZERO               = ERRG_SPECIFIC(2, TRIGGER_MNGR),

   ERRG_GEN_COMMON(EV_CNN_BOOT)
   CNN_BOOT__ERR_INVALID_CNN_ID              = ERRG_SPECIFIC(1,EV_CNN_BOOT),
   CNN_BOOT__ERR_FAILED_TO_OPEN_FILE         = ERRG_SPECIFIC(2,EV_CNN_BOOT),
   CNN_BOOT__ERR_BOOT_FAIL                   = ERRG_SPECIFIC(3,EV_CNN_BOOT),
   CNN_BOOT__ERR_CNN_ALREADY_RUNNING         = ERRG_SPECIFIC(4,EV_CNN_BOOT),

   ERRG_GEN_COMMON(SOCKET_MOD)
   SOCKET_MOD__ERR_LOST_SOCKET_CONNECTION       = ERRG_SPECIFIC(1,SOCKET_MOD),
   SOCKET_MOD__ERR_GENERAL_ERR                  = ERRG_SPECIFIC(2,SOCKET_MOD),
   SOCKET_MOD__ERR_SEND_FAIL_ERR                = ERRG_SPECIFIC(3,SOCKET_MOD),

   ERRG_GEN_COMMON(NAND)

   ERRG_GEN_COMMON(ISP_MNGR)

   ERRG_GEN_COMMON(CDC_COM)
   CDC_COM__ERR_GENERAL_ERROR                   = ERRG_SPECIFIC(1, CDC_COM),
   CDC_COM__ERR_INIT_FAIL                       = ERRG_SPECIFIC(2, CDC_COM),
   CDC_COM__ERR_OPEN_FAIL                       = ERRG_SPECIFIC(3, CDC_COM),
   CDC_COM__ERR_CLOSE_FAIL                      = ERRG_SPECIFIC(4, CDC_COM),
   CDC_COM__ERR_SEND_FAIL                       = ERRG_SPECIFIC(5, CDC_COM),

   ERRG_GEN_COMMON(PWR_MNGR)
   PWR_MNGR__ERR_THREAD_ERROR                   = ERRG_SPECIFIC(1, PWR_MNGR),

   ERRG_GEN_COMMON(INU_METADATA)
   INU_METADATA__ERR_METADATA_BUFFER_FAIL =      ERRG_SPECIFIC(1, INU_METADATA),
   INU_METADATA__ERR_METADATA_BUFFER_SIZE_FAIL = ERRG_SPECIFIC(2, INU_METADATA),
   INU_METADATA__ERR_METADATA_PB_ENCODE_FAIL =   ERRG_SPECIFIC(3, INU_METADATA),
   INU_METADATA__ERR_METADATA_PB_DECODE_FAIL =   ERRG_SPECIFIC(4, INU_METADATA),
   INU_METADATA__ERR_METADATA_PROTOCOL_VERSION_MISMATCH =   ERRG_SPECIFIC(5, INU_METADATA),
   INU_METADATA__ERR_METADATA_PREAMBLE_WRONG = ERRG_SPECIFIC(6, INU_METADATA),
   INU_METADATA__ERR_METADATA_INVALID_SENSOR_HANDLE = ERRG_SPECIFIC(7,INU_METADATA),
   INU_METADATA__ERR_METADATA_NO_SENSOR_UPDATE_FOR_THIS_SENSOR = ERRG_SPECIFIC(8,INU_METADATA),
   INU_METADATA__ERR_METADATA_INVALID_SENSOR_STATE = ERRG_SPECIFIC(9,INU_METADATA),
   INU_METADATA__ERR_METADATA_INVALID_SENSOR_QUEUE = ERRG_SPECIFIC(10,INU_METADATA),
   INU_METADATA__ERR_METADATA_NO_EXISTING_ENTRY = ERRG_SPECIFIC(11,INU_METADATA),
   INU_METADATA__ERR_METADATA_INVALID_COLOUR_CORRECTION_MATRIX = ERRG_SPECIFIC(12,INU_METADATA),
   INU_METADATA__ERR_METADATA_INVALID_WB_VALUES = ERRG_SPECIFIC(13,INU_METADATA),

   ERRG_GEN_COMMON(INU_SENSORSYNC)
   INU_SENSORSYNC_ERR_BUFFER_FAIL =      ERRG_SPECIFIC(1, INU_SENSORSYNC),
   INU_SENSORSYNC__ERR_BUFFER_SIZE_FAIL = ERRG_SPECIFIC(2, INU_SENSORSYNC),
   INU_SENSORSYNC_ERR_PB_ENCODE_FAIL =   ERRG_SPECIFIC(3, INU_SENSORSYNC),
   INU_SENSORSYNC__ERR_PB_DECODE_FAIL =   ERRG_SPECIFIC(4, INU_SENSORSYNC),
   INU_SENSORSYNC__ERR_NO_EXISTING_ENTRY = ERRG_SPECIFIC(5, INU_SENSORSYNC),
   INU_SENSORSYNC__ERR_NO_SENSORSYNC_UPDATES= ERRG_SPECIFIC(6, INU_SENSORSYNC),

   ERRG_GEN_COMMON(INU_METADATA_UART)
   ERRG_GEN_COMMON(VE_MNGR)
   VE_MNGR__ERR_NOT_READY                       = ERRG_SPECIFIC(1, VE_MNGR),

   ERRG_GEN_COMMON(INU_FW_UPDATE)
   INU_FW_UPDATE__ERR_INVALID_BIN_FILE          = ERRG_SPECIFIC(1, INU_FW_UPDATE),
   INU_FW_UPDATE__ERR_INVALID_PATH              = ERRG_SPECIFIC(2, INU_FW_UPDATE),
   INU_FW_UPDATE__ERR_VERIFICATION              = ERRG_SPECIFIC(3, INU_FW_UPDATE),
   INU_FW_UPDATE__ERR_IMAGE_TYPE                = ERRG_SPECIFIC(4, INU_FW_UPDATE),

   ERRG_GEN_COMMON(CDC_MNGR)
   CDC_MNGR__ERR_THREAD_ERROR                   = ERRG_SPECIFIC(1, CDC_MNGR),
   CDC_MNGR__ERR_ALLOC_FAILED                   = ERRG_SPECIFIC(2, CDC_MNGR),

   ERRG_LAST_ERR_CODE_E
} ERRG_codeE;

/****************************************************************************
 ***************      E X T E R N A L       D A T A           ***************
 ****************************************************************************/

/****************************************************************************
 ***************     G L O B A L         F U N C T I O N S    ***************
 ****************************************************************************/

#ifdef __cplusplus
}
#endif
#endif
