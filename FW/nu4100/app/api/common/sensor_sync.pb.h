/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7-dev */

#ifndef PB_SENSOR_SYNC_SENSOR_SYNC_PB_H_INCLUDED
#define PB_SENSOR_SYNC_SENSOR_SYNC_PB_H_INCLUDED
#include <pb.h>
#include "metadata.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _SENSOR_SYNC_Pulse_Polarity {
    SENSOR_SYNC_Pulse_Polarity_Active_High = 0,
    SENSOR_SYNC_Pulse_Polarity_Active_Low = 1
} SENSOR_SYNC_Pulse_Polarity;

typedef enum _SENSOR_SYNC_FSG_Counter {
    SENSOR_SYNC_FSG_Counter_FSG_COUNTER_0 = 0, /* Gaze trigger on the master, Tracking on the slave */
    SENSOR_SYNC_FSG_Counter_FSG_COUNTER_1 = 1, /* Tracking trigger on the master, VST on the slave */
    SENSOR_SYNC_FSG_Counter_FSG_COUNTER_2 = 2 /* VST on the master, TOF on the slave */
} SENSOR_SYNC_FSG_Counter;

typedef enum _SENSOR_SYNC_FSG_Pulse_Channel {
    SENSOR_SYNC_FSG_Pulse_Channel_FSG_PULSE_0 = 0, /* Gaze trigger on the master, Tracking on the slave */
    SENSOR_SYNC_FSG_Pulse_Channel_FSG_PULSE_1 = 1, /* Tracking trigger on the master, VST on the slave */
    SENSOR_SYNC_FSG_Pulse_Channel_FSG_PULSE_2 = 2, /* VST on the master, TOF on the slave */
    SENSOR_SYNC_FSG_Pulse_Channel_FSG_PULSE_3 = 3, /* Unused */
    SENSOR_SYNC_FSG_Pulse_Channel_FSG_PULSE_4 = 4, /* Unsued */
    SENSOR_SYNC_FSG_Pulse_Channel_FSG_PULSE_5 = 5 /* Unsued */
} SENSOR_SYNC_FSG_Pulse_Channel;

typedef enum _SENSOR_SYNC_FSG_Count_mode {
    SENSOR_SYNC_FSG_Count_mode_FSG_CNTMODE_MANUAL = 0,
    SENSOR_SYNC_FSG_Count_mode_FSG_CNTMODE_SWMODE = 1,
    SENSOR_SYNC_FSG_Count_mode_FSG_CNTMODE_HWMODE = 2,
    SENSOR_SYNC_FSG_Count_mode_FSG_CNTMODE_HWSYNC = 3
} SENSOR_SYNC_FSG_Count_mode;

/* Struct definitions */
typedef struct _SENSOR_SYNC_Counter_Source {
    uint32_t counter_source;
} SENSOR_SYNC_Counter_Source;

typedef struct _SENSOR_SYNC_FSG_Counter_Mode_M {
    SENSOR_SYNC_FSG_Count_mode countMode;
} SENSOR_SYNC_FSG_Counter_Mode_M;

typedef struct _SENSOR_SYNC_FSG_Counter_Value {
    uint32_t counter_value;
} SENSOR_SYNC_FSG_Counter_Value;

typedef struct _SENSOR_SYNC_TOF_Pulse_Source {
    SENSOR_SYNC_Pulse_Polarity pulsePolarity;
    uint32_t pulseWidth;
    bool pulseEnable;
} SENSOR_SYNC_TOF_Pulse_Source;

/* These are the trigger sources
#define EXTERN_SYNC_START_INDEX 16
const UINT8 SLAVE_TRIGGER_SYNC_SOURCE = EXTERN_SYNC_START_INDEX + 11 ; 
const UINT8 TE_C2_SYNC_SRC = EXTERN_SYNC_START_INDEX + 14; 
const UINT8 TE_C1_SYNC_SRC = EXTERN_SYNC_START_INDEX + 15; */
typedef struct _SENSOR_SYNC_Trigger_Source {
    uint32_t triggerSource;
} SENSOR_SYNC_Trigger_Source;

typedef struct _SENSOR_SYNC_FSG_Channel_Configuration {
    SENSOR_SYNC_FSG_Pulse_Channel pulseChannel; /* Which pulse channel we are going to update */
    SENSOR_SYNC_Pulse_Polarity pulsePolarity; /* Polarity of the pulse */
    uint32_t pulseWidth; /* Width of the pulse (1 Count = 4ns), Maximum this value can be is 255 */
    bool pulseEnable; /* If the pulse should be enabled or not */
    bool has_counterSource;
    SENSOR_SYNC_Counter_Source counterSource; /* Counter source value */
    uint32_t pulseOffset; /* Pulse offset */
    uint32_t pulseRepeatPeriod; /* Pulses can be be repeated with a period of this value, 0 = No repeats */
} SENSOR_SYNC_FSG_Channel_Configuration;

typedef struct _SENSOR_SYNC_FSG_Counter_Configuration {
    SENSOR_SYNC_FSG_Counter counter;
    bool has_value;
    SENSOR_SYNC_FSG_Counter_Value value;
    bool has_triggerSource;
    SENSOR_SYNC_Trigger_Source triggerSource; /* Trigger source value */
    bool has_countMode;
    SENSOR_SYNC_FSG_Counter_Mode_M countMode;
} SENSOR_SYNC_FSG_Counter_Configuration;

typedef struct _SENSOR_SYNC_Pulse_Config {
    bool has_counterConfiguration;
    SENSOR_SYNC_FSG_Counter_Configuration counterConfiguration; /* Which group of sensors we're going to change */
    bool has_channelConfiguration;
    SENSOR_SYNC_FSG_Channel_Configuration channelConfiguration;
} SENSOR_SYNC_Pulse_Config;

typedef struct _SENSOR_SYNC_topLevel {
    pb_size_t configs_count;
    SENSOR_SYNC_Pulse_Config configs[4]; /* Array of sensor trigger pulse configurations */
} SENSOR_SYNC_topLevel;


/* Helper constants for enums */
#define _SENSOR_SYNC_Pulse_Polarity_MIN SENSOR_SYNC_Pulse_Polarity_Active_High
#define _SENSOR_SYNC_Pulse_Polarity_MAX SENSOR_SYNC_Pulse_Polarity_Active_Low
#define _SENSOR_SYNC_Pulse_Polarity_ARRAYSIZE ((SENSOR_SYNC_Pulse_Polarity)(SENSOR_SYNC_Pulse_Polarity_Active_Low+1))

#define _SENSOR_SYNC_FSG_Counter_MIN SENSOR_SYNC_FSG_Counter_FSG_COUNTER_0
#define _SENSOR_SYNC_FSG_Counter_MAX SENSOR_SYNC_FSG_Counter_FSG_COUNTER_2
#define _SENSOR_SYNC_FSG_Counter_ARRAYSIZE ((SENSOR_SYNC_FSG_Counter)(SENSOR_SYNC_FSG_Counter_FSG_COUNTER_2+1))

#define _SENSOR_SYNC_FSG_Pulse_Channel_MIN SENSOR_SYNC_FSG_Pulse_Channel_FSG_PULSE_0
#define _SENSOR_SYNC_FSG_Pulse_Channel_MAX SENSOR_SYNC_FSG_Pulse_Channel_FSG_PULSE_5
#define _SENSOR_SYNC_FSG_Pulse_Channel_ARRAYSIZE ((SENSOR_SYNC_FSG_Pulse_Channel)(SENSOR_SYNC_FSG_Pulse_Channel_FSG_PULSE_5+1))

#define _SENSOR_SYNC_FSG_Count_mode_MIN SENSOR_SYNC_FSG_Count_mode_FSG_CNTMODE_MANUAL
#define _SENSOR_SYNC_FSG_Count_mode_MAX SENSOR_SYNC_FSG_Count_mode_FSG_CNTMODE_HWSYNC
#define _SENSOR_SYNC_FSG_Count_mode_ARRAYSIZE ((SENSOR_SYNC_FSG_Count_mode)(SENSOR_SYNC_FSG_Count_mode_FSG_CNTMODE_HWSYNC+1))



#define SENSOR_SYNC_TOF_Pulse_Source_pulsePolarity_ENUMTYPE SENSOR_SYNC_Pulse_Polarity


#define SENSOR_SYNC_FSG_Counter_Mode_M_countMode_ENUMTYPE SENSOR_SYNC_FSG_Count_mode

#define SENSOR_SYNC_FSG_Counter_Configuration_counter_ENUMTYPE SENSOR_SYNC_FSG_Counter

#define SENSOR_SYNC_FSG_Channel_Configuration_pulseChannel_ENUMTYPE SENSOR_SYNC_FSG_Pulse_Channel
#define SENSOR_SYNC_FSG_Channel_Configuration_pulsePolarity_ENUMTYPE SENSOR_SYNC_Pulse_Polarity




#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define SENSOR_SYNC_Trigger_Source_init_default  {0}
#define SENSOR_SYNC_Counter_Source_init_default  {0}
#define SENSOR_SYNC_TOF_Pulse_Source_init_default {_SENSOR_SYNC_Pulse_Polarity_MIN, 0, 0}
#define SENSOR_SYNC_FSG_Counter_Value_init_default {0}
#define SENSOR_SYNC_FSG_Counter_Mode_M_init_default {_SENSOR_SYNC_FSG_Count_mode_MIN}
#define SENSOR_SYNC_FSG_Counter_Configuration_init_default {_SENSOR_SYNC_FSG_Counter_MIN, false, SENSOR_SYNC_FSG_Counter_Value_init_default, false, SENSOR_SYNC_Trigger_Source_init_default, false, SENSOR_SYNC_FSG_Counter_Mode_M_init_default}
#define SENSOR_SYNC_FSG_Channel_Configuration_init_default {_SENSOR_SYNC_FSG_Pulse_Channel_MIN, _SENSOR_SYNC_Pulse_Polarity_MIN, 0, 0, false, SENSOR_SYNC_Counter_Source_init_default, 0, 0}
#define SENSOR_SYNC_Pulse_Config_init_default    {false, SENSOR_SYNC_FSG_Counter_Configuration_init_default, false, SENSOR_SYNC_FSG_Channel_Configuration_init_default}
#define SENSOR_SYNC_topLevel_init_default        {0, {SENSOR_SYNC_Pulse_Config_init_default, SENSOR_SYNC_Pulse_Config_init_default, SENSOR_SYNC_Pulse_Config_init_default, SENSOR_SYNC_Pulse_Config_init_default}}
#define SENSOR_SYNC_Trigger_Source_init_zero     {0}
#define SENSOR_SYNC_Counter_Source_init_zero     {0}
#define SENSOR_SYNC_TOF_Pulse_Source_init_zero   {_SENSOR_SYNC_Pulse_Polarity_MIN, 0, 0}
#define SENSOR_SYNC_FSG_Counter_Value_init_zero  {0}
#define SENSOR_SYNC_FSG_Counter_Mode_M_init_zero {_SENSOR_SYNC_FSG_Count_mode_MIN}
#define SENSOR_SYNC_FSG_Counter_Configuration_init_zero {_SENSOR_SYNC_FSG_Counter_MIN, false, SENSOR_SYNC_FSG_Counter_Value_init_zero, false, SENSOR_SYNC_Trigger_Source_init_zero, false, SENSOR_SYNC_FSG_Counter_Mode_M_init_zero}
#define SENSOR_SYNC_FSG_Channel_Configuration_init_zero {_SENSOR_SYNC_FSG_Pulse_Channel_MIN, _SENSOR_SYNC_Pulse_Polarity_MIN, 0, 0, false, SENSOR_SYNC_Counter_Source_init_zero, 0, 0}
#define SENSOR_SYNC_Pulse_Config_init_zero       {false, SENSOR_SYNC_FSG_Counter_Configuration_init_zero, false, SENSOR_SYNC_FSG_Channel_Configuration_init_zero}
#define SENSOR_SYNC_topLevel_init_zero           {0, {SENSOR_SYNC_Pulse_Config_init_zero, SENSOR_SYNC_Pulse_Config_init_zero, SENSOR_SYNC_Pulse_Config_init_zero, SENSOR_SYNC_Pulse_Config_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define SENSOR_SYNC_Counter_Source_counter_source_tag 1
#define SENSOR_SYNC_FSG_Counter_Mode_M_countMode_tag 1
#define SENSOR_SYNC_FSG_Counter_Value_counter_value_tag 1
#define SENSOR_SYNC_TOF_Pulse_Source_pulsePolarity_tag 1
#define SENSOR_SYNC_TOF_Pulse_Source_pulseWidth_tag 2
#define SENSOR_SYNC_TOF_Pulse_Source_pulseEnable_tag 3
#define SENSOR_SYNC_Trigger_Source_triggerSource_tag 1
#define SENSOR_SYNC_FSG_Channel_Configuration_pulseChannel_tag 1
#define SENSOR_SYNC_FSG_Channel_Configuration_pulsePolarity_tag 2
#define SENSOR_SYNC_FSG_Channel_Configuration_pulseWidth_tag 3
#define SENSOR_SYNC_FSG_Channel_Configuration_pulseEnable_tag 4
#define SENSOR_SYNC_FSG_Channel_Configuration_counterSource_tag 5
#define SENSOR_SYNC_FSG_Channel_Configuration_pulseOffset_tag 6
#define SENSOR_SYNC_FSG_Channel_Configuration_pulseRepeatPeriod_tag 7
#define SENSOR_SYNC_FSG_Counter_Configuration_counter_tag 1
#define SENSOR_SYNC_FSG_Counter_Configuration_value_tag 2
#define SENSOR_SYNC_FSG_Counter_Configuration_triggerSource_tag 3
#define SENSOR_SYNC_FSG_Counter_Configuration_countMode_tag 4
#define SENSOR_SYNC_Pulse_Config_counterConfiguration_tag 1
#define SENSOR_SYNC_Pulse_Config_channelConfiguration_tag 2
#define SENSOR_SYNC_topLevel_configs_tag         1

/* Struct field encoding specification for nanopb */
#define SENSOR_SYNC_Trigger_Source_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   triggerSource,     1)
#define SENSOR_SYNC_Trigger_Source_CALLBACK NULL
#define SENSOR_SYNC_Trigger_Source_DEFAULT NULL

#define SENSOR_SYNC_Counter_Source_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   counter_source,    1)
#define SENSOR_SYNC_Counter_Source_CALLBACK NULL
#define SENSOR_SYNC_Counter_Source_DEFAULT NULL

#define SENSOR_SYNC_TOF_Pulse_Source_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    pulsePolarity,     1) \
X(a, STATIC,   SINGULAR, UINT32,   pulseWidth,        2) \
X(a, STATIC,   SINGULAR, BOOL,     pulseEnable,       3)
#define SENSOR_SYNC_TOF_Pulse_Source_CALLBACK NULL
#define SENSOR_SYNC_TOF_Pulse_Source_DEFAULT NULL

#define SENSOR_SYNC_FSG_Counter_Value_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   counter_value,     1)
#define SENSOR_SYNC_FSG_Counter_Value_CALLBACK NULL
#define SENSOR_SYNC_FSG_Counter_Value_DEFAULT NULL

#define SENSOR_SYNC_FSG_Counter_Mode_M_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    countMode,         1)
#define SENSOR_SYNC_FSG_Counter_Mode_M_CALLBACK NULL
#define SENSOR_SYNC_FSG_Counter_Mode_M_DEFAULT NULL

#define SENSOR_SYNC_FSG_Counter_Configuration_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    counter,           1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  value,             2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  triggerSource,     3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  countMode,         4)
#define SENSOR_SYNC_FSG_Counter_Configuration_CALLBACK NULL
#define SENSOR_SYNC_FSG_Counter_Configuration_DEFAULT NULL
#define SENSOR_SYNC_FSG_Counter_Configuration_value_MSGTYPE SENSOR_SYNC_FSG_Counter_Value
#define SENSOR_SYNC_FSG_Counter_Configuration_triggerSource_MSGTYPE SENSOR_SYNC_Trigger_Source
#define SENSOR_SYNC_FSG_Counter_Configuration_countMode_MSGTYPE SENSOR_SYNC_FSG_Counter_Mode_M

#define SENSOR_SYNC_FSG_Channel_Configuration_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    pulseChannel,      1) \
X(a, STATIC,   SINGULAR, UENUM,    pulsePolarity,     2) \
X(a, STATIC,   SINGULAR, UINT32,   pulseWidth,        3) \
X(a, STATIC,   SINGULAR, BOOL,     pulseEnable,       4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  counterSource,     5) \
X(a, STATIC,   SINGULAR, UINT32,   pulseOffset,       6) \
X(a, STATIC,   SINGULAR, UINT32,   pulseRepeatPeriod,   7)
#define SENSOR_SYNC_FSG_Channel_Configuration_CALLBACK NULL
#define SENSOR_SYNC_FSG_Channel_Configuration_DEFAULT NULL
#define SENSOR_SYNC_FSG_Channel_Configuration_counterSource_MSGTYPE SENSOR_SYNC_Counter_Source

#define SENSOR_SYNC_Pulse_Config_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  counterConfiguration,   1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  channelConfiguration,   2)
#define SENSOR_SYNC_Pulse_Config_CALLBACK NULL
#define SENSOR_SYNC_Pulse_Config_DEFAULT NULL
#define SENSOR_SYNC_Pulse_Config_counterConfiguration_MSGTYPE SENSOR_SYNC_FSG_Counter_Configuration
#define SENSOR_SYNC_Pulse_Config_channelConfiguration_MSGTYPE SENSOR_SYNC_FSG_Channel_Configuration

#define SENSOR_SYNC_topLevel_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  configs,           1)
#define SENSOR_SYNC_topLevel_CALLBACK NULL
#define SENSOR_SYNC_topLevel_DEFAULT NULL
#define SENSOR_SYNC_topLevel_configs_MSGTYPE SENSOR_SYNC_Pulse_Config

extern const pb_msgdesc_t SENSOR_SYNC_Trigger_Source_msg;
extern const pb_msgdesc_t SENSOR_SYNC_Counter_Source_msg;
extern const pb_msgdesc_t SENSOR_SYNC_TOF_Pulse_Source_msg;
extern const pb_msgdesc_t SENSOR_SYNC_FSG_Counter_Value_msg;
extern const pb_msgdesc_t SENSOR_SYNC_FSG_Counter_Mode_M_msg;
extern const pb_msgdesc_t SENSOR_SYNC_FSG_Counter_Configuration_msg;
extern const pb_msgdesc_t SENSOR_SYNC_FSG_Channel_Configuration_msg;
extern const pb_msgdesc_t SENSOR_SYNC_Pulse_Config_msg;
extern const pb_msgdesc_t SENSOR_SYNC_topLevel_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define SENSOR_SYNC_Trigger_Source_fields &SENSOR_SYNC_Trigger_Source_msg
#define SENSOR_SYNC_Counter_Source_fields &SENSOR_SYNC_Counter_Source_msg
#define SENSOR_SYNC_TOF_Pulse_Source_fields &SENSOR_SYNC_TOF_Pulse_Source_msg
#define SENSOR_SYNC_FSG_Counter_Value_fields &SENSOR_SYNC_FSG_Counter_Value_msg
#define SENSOR_SYNC_FSG_Counter_Mode_M_fields &SENSOR_SYNC_FSG_Counter_Mode_M_msg
#define SENSOR_SYNC_FSG_Counter_Configuration_fields &SENSOR_SYNC_FSG_Counter_Configuration_msg
#define SENSOR_SYNC_FSG_Channel_Configuration_fields &SENSOR_SYNC_FSG_Channel_Configuration_msg
#define SENSOR_SYNC_Pulse_Config_fields &SENSOR_SYNC_Pulse_Config_msg
#define SENSOR_SYNC_topLevel_fields &SENSOR_SYNC_topLevel_msg

/* Maximum encoded size of messages (where known) */
#define SENSOR_SYNC_Counter_Source_size          6
#define SENSOR_SYNC_FSG_Channel_Configuration_size 32
#define SENSOR_SYNC_FSG_Counter_Configuration_size 22
#define SENSOR_SYNC_FSG_Counter_Mode_M_size      2
#define SENSOR_SYNC_FSG_Counter_Value_size       6
#define SENSOR_SYNC_Pulse_Config_size            58
#define SENSOR_SYNC_TOF_Pulse_Source_size        10
#define SENSOR_SYNC_Trigger_Source_size          6
#define SENSOR_SYNC_topLevel_size                240

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
